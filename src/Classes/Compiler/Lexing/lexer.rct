// Compiler/Lexing/lexer in rcc
// Yea, this lexes :)

////// PREDEFINITIONS //////
set pointer <- 0;
set tokens <- make Token array(0);


////// MAIN TOKEN BIT //////
function Lex() {
    while(!EOF()){
        // stick comments in front, to save resources
        if(Current() = "/" && Peek(1) = "/") { while(Current() != "\n") { Step(1); } continue; }
        if(Current() = "/" && Peek(1) = "*") { var start <- pointer; var closed <- false; while(!EOF()) { Step(1); if(Current() = "*" && Peek(1) = "/") { closed <- true; break; } } if(!closed) {ReportError("Unclosed multi-line comment", ErrorType->EOFError, GetPos(start, code)); break; } Step(2); continue; }

        // Ok, do checking here ig //

        var pos <- GetPos(pointer, code);

        // whitespaces
        if(Current() = " ")  { Step(1); continue; }
        if(Current() = "\t") { Step(1); continue; }
        if(Current() = "\r") { Step(1); continue; }
        if(Current() = "\n") { tokens->Push(make Token(TokenType->Newline, "", pos)); Step(1); continue; }
        if(Current() = ";")  { tokens->Push(make Token(TokenType->Newline, "", pos)); Step(1); continue; }

        //expression characters
        if(Current() = "(") { tokens->Push(make Token(TokenType->OpenParenthasis, "", pos));     Step(1); continue; }
        if(Current() = ")") { tokens->Push(make Token(TokenType->CloseParenthasis, "", pos));    Step(1); continue; }
        if(Current() = ",") { tokens->Push(make Token(TokenType->Comma, "", pos));               Step(1); continue; }

        // operations
        if(Current() = "+") { tokens->Push(make Token(TokenType->Operation, "+", pos)); Step(1); continue; }
        if(Current() = "-") { tokens->Push(make Token(TokenType->Operation, "-", pos)); Step(1); continue; }
        if(Current() = "/") { tokens->Push(make Token(TokenType->Operation, "/", pos)); Step(1); continue; }
        if(Current() = "*") { tokens->Push(make Token(TokenType->Operation, "*", pos)); Step(1); continue; }

        if (IsLetter(Current())) { var word <- LexWord(); var wordType <- LexWordType(word); tokens ->Push(make Token(wordType, word, pos)); continue; }
        if (IsDigit(Current())) { LexNum(); ; continue; }
        if(Current() = "." && IsDigit(Peek(1))) { LexShortFloat(); continue; }

        //lets keep it simple for now. -rc
        //if(Current() = ":" && Peek(1) = ":") { tokens->Push(GenToken(TokenType->PackageAcs, "")); Step(1); Step(1); continue;}

        if (Current() = """") { tokens ->Push(make Token(TokenType ->String, LexString(), pos)); Step(1); continue; }

        //Print error, noice
        ReportError("Unexpected character: """ + Current() + """", ErrorType->InvalidCharacterError, GetPos(pointer, code));

        //Increase pointer, dont get stuck
        Step(1);
    }
}

function PrintError(error string, errortype ErrorType){
        SetConsoleForeground(4);
        Print("ERROR: " + string(errortype) + ": " + error);
        SetConsoleForeground(7);
}

function LexWordType(token string) TokenType{
    if(ContainsItem(keywords, token)){
        return TokenType->Keyword
    }
    if(ContainsItem(keyfuncs, token)){
        return TokenType->KeyFunc
    }
    return TokenType->Word;
}
function LexWord() string{
    var word <- "";
    while(IsLetter(Current()) && !EOF()){
        word <-+ Current();
        Step(1);
    }
    return word;
}

function LexNum(){
    var num <- "";
    var isFloat <- false;
    var pointerStart <- pointer;
    while(IsDigit(Current()) && !EOF()){
        num <-+ Current();
        if(Peek(1) = "." && IsDigit(Peek(2))){
            if(isFloat){
                ReportError("Floating point number cannot have more than one comma", ErrorType->UnknownError, GetPos(pointer, code));
            }
            num <-+ ".";
            isFloat <- true;
            Step(1);
        }
        Step(1);
    }
    tokens ->Push(make Token(isFloat ? TokenType -> Float : TokenType -> Int, num, GetPos(pointerStart, code);))
}

function LexShortFloat(){
    var num <- "0.";
    var isFloat <- false;
    var pointerStart <- pointer;
    Print("ShortFloat")
    Step(1);
    while(IsDigit(Current()) && !EOF()){
        num <-+ Current();
        if(Peek(1) = "." && IsDigit(Peek(2))){
            ReportError("Floating point number cannot have more than one comma", ErrorType->UnknownError, GetPos(pointer, code));
        }
        Step(1);
    }
    tokens ->Push(make Token(TokenType -> Float, num, GetPos(pointerStart, code);))
}

function LexString() string{
    var str <- "";
    Step(1)
    while(Current() != Char(34) && !EOF()){
        str <-+ Current();
        Step(1);
    }
    return str;
}




// Here we define functions to get deeta //
function Current() string { return Peek(0); }                                                                       // Current char in code
function Peek(offset int) string { if (EOFO(offset)) return ""; return code ->Substring(pointer + offset, 1); }     // Peek into the future
function EOF() bool { return pointer >= code ->GetLength(); }                                                       // Is it EOF at current?
function EOFO(offset int) bool { return pointer + offset >= code ->GetLength(); }                                   // Is it EOF in [offset] chars
function Step(amount int) { pointer <-+ amount; }                                                                   // QOL function
function Parse(){
    pointer <- 0;
    while(!EOFT()){

        InvalidTokenError(CurrentToken());
        pointer++;
    }
}

function InvalidTokenError(token Token){
        if(CurrentToken() -> value != ""){
            PrintError("Unexpected tokentype: " + Char(34) + string(token -> tokenType) + Char(34) + " with value: " + Char(34) + string(token -> value) + Char(34), ErrorType->InvalidTokenError);
        }
        else{
            PrintError("Unexpected tokentype: " + Char(34) + string(token -> tokenType) + Char(34), ErrorType->InvalidTokenError);
        }
}

function CurrentToken() Token { return PeekToken(0); }   // Current token in code
function PeekToken(offset int) Token { if (EOFO(offset)) return GenToken(TokenType -> Word, "Null"); return tokens[pointer + offset] } // Peek into the future
function EOFT() bool { return pointer >= tokens ->GetLength(); }  // Is it EOF at current?
function EOFOT(offset int) bool { return pointer + offset >= tokens ->GetLength(); }   // Is it EOF in [offset] chars

abs class Container{
    virt set Ctype <- "Undefined";
    virt set any value <- null;
}
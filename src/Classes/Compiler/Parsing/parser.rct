set packages <- make string array(0);
set upackages <- make string array(0);

set nodes <- make SyntaxNode array(0);

function Parse()
{
    pointer <- 0;
    while(!EOFT())
    {
        // normally youd do member parsing here but we dont have members like functions yet lol
        nodes->Push(ParseStatement());
    }
}

////// STATEMENTS //////

function ParseStatement() SyntaxNode
{
    // we only got one type of statement atm lol
    return ParseExpressionStatement();
}

function ParseExpressionStatement() SyntaxNode
{
    var exp <- ParseExpression();
    return make ExpressionStatementNode(exp->Pos, exp);
}


////// EXPRESSIONS //////

function ParseExpression() ExpressionSyntax
{
    //for now were just redirecting but here wed do non binary stuff like "make"

    return string(PeekToken(1)->Type) = string(TokenType->Operation) ? ParseBinaryExpression(0) : ParseExpressionInternal();
}

function ParseBinaryExpression(parentPrec int) ExpressionSyntax 
{
    var left <- ParseExpressionInternal();

    while (true)
    {
        var precedence <- GetOperatorPrecedence(CurrentToken());
        if (precedence = 0 || precedence <= parentPrec)
            break;

        var op <- ParseOperator();
        var right <- ParseBinaryExpression(precedence);
        left <- make BinaryExpressionNode(left->Pos, left, right, op);
    }

    return left;
}

function ParseExpressionInternal() ExpressionSyntax
{
    if (int(CurrentToken()->Type) = TokenType->Int) return ParseNumberLiteral();
    if (int(CurrentToken()->Type) = TokenType->String) return ParseStringLiteral();
    if(BUILDMODE = "Dev" || BUILDMODE = "DevTest")
        ReportWarning("Token of type: """ + string(CurrentToken() ->Type) + """ is not supported, but doesnt return an error for now", WarningType->Warning, CurrentToken() ->Pos);
    else if(BUILDMODE = "Debug")
        ReportError("Token of type: """ + string(CurrentToken() ->Type) + """ is not supported", ErrorType->InvalidTokenError, CurrentToken() ->Pos);
    Step(1);
    return make LiteralExpressionNode(Position(nil), Token(nil));
}

function ParseNumberLiteral() ExpressionSyntax
{
    var num <- Consume(TokenType->Int);
    return make LiteralExpressionNode(num->Pos, num);
}

function ParseStringLiteral() ExpressionSyntax
{
    var str <- Consume(TokenType->String);
    return make LiteralExpressionNode(str->Pos, str);
}


////// OTHER STUFF IDK LOL //////

function ParseOperator() BinaryOperatorKind
{
    var op <- Consume(TokenType->Operation);

    if (op->Value = "+") return BinaryOperatorKind->Plus;
    if (op->Value = "-") return BinaryOperatorKind->Minus;
    if (op->Value = "*") return BinaryOperatorKind->Multiply;
    if (op->Value = "/") return BinaryOperatorKind->Divide;

    return BinaryOperatorKind(0);
}

//utils
function CurrentToken() Token { return PeekToken(0); }   // Current token in code
function PeekToken(offset int) Token { if (EOFOT(offset)) return make Token(TokenType(0), "Null", Position(null)); return tokens[pointer + offset] } // Peek into the future
function EOFT() bool { return pointer >= tokens ->GetLength(); }  // Is it EOF at current?
function EOFOT(offset int) bool { return pointer + offset >= tokens ->GetLength(); }   // Is it EOF in [offset] chars

function Consume(ttype TokenType) Token
{
    if (int(CurrentToken()->Type) = ttype)
    {
        Step(1);
        return PeekToken(-1);
    }
    else
        UnexpectedTokenError(CurrentToken()->Type, ttype);

    return Token(nil);
}

//error reporters
function InvalidTokenError(token Token) { ReportError("Unexpected tokentype: """ + string(token -> Type) + """ with Value: " + string(token -> Value), ErrorType->InvalidTokenError, token->Pos);}
function UnexpectedTokenError(got TokenType, expected TokenType) { ReportError("Unexpected Token: """ + string(got) + """ expected: " + string(expected), ErrorType->InvalidTokenError, CurrentToken()->Pos);}
function InvalidUsageFuncError(token Token) { ReportError("Function: """ + string(token -> Type) + """ cannot be used as a variable", ErrorType->InvalidUsageError, token->Pos);}
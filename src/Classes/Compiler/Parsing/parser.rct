set containers <- make Container array(0);
set packages <- make string array(0);
set upackages <- make string array(0);
function Parse(){
    pointer <- 0;
    while(!EOFT()){
        if(string(CurrentToken() ->Type) = string(TokenType -> Newline)){
            pointer++; continue;
        }
        if(string(CurrentToken() ->Type) = string(TokenType -> Keyword)){
            ParseKeyword(); continue;
        }
        if(string(CurrentToken() ->Type) = string(TokenType -> Word)){
            ParseWord(); continue;
        }

        InvalidTokenError(CurrentToken());
        pointer++;
    }
}

function ParseWord(){
    /*if(string(PeekToken(1) -> Type) = string(TokenType -> PackageAcs)){
        if(ContainsItem(packages, CurrentToken() ->Value)){
            if(string(PeekToken(3) -> Type) = string(TokenType -> OpenParenthasis)){
                var params <- make Container array(0);
                params ->Push(GenContainer("funcName", GenContainer("Value", PeekToken(2) -> Value)));
                pointer <-+ 3;
                while(string(CurrentToken() -> Type) != string(TokenType -> CloseParenthasis)){
                    if(string(CurrentToken() -> Type) = string(TokenType -> String)){
                        params ->Push(GenContainer("string", GenContainer("Value", CurrentToken() ->Value)));
                    }
                    
                    pointer++;
                }
                containers ->Push(GenContainer("packageFetch", GenContainer("Call", GenContainer("Values", params))));
                pointer <-+ 4;
                return;
            }
            else{
                containers ->Push(GenContainer("packageFetch", GenContainer("Var", GenContainer("Value", PeekToken(2) -> Value))))
                pointer <-+3;
                return;
            }
        }
    }
    */

    ReportError("Not Implemented yet!", ErrorType->UnimplementedError, CurrentToken()->Pos);
    InvalidTokenError(CurrentToken());
    pointer++;
}

function ParseKeyword(){

    //For now
    ReportError("Not Implemented yet!", ErrorType->UnimplementedError, CurrentToken()->Pos);
    InvalidTokenError(CurrentToken());
    pointer++;
    return;


    if(CurrentToken() -> Value = "package"){
        if(string(PeekToken(1) -> Type) = string(TokenType -> Word)){
            containers ->Push(GenContainer("packageInc", GenContainer("Value", PeekToken(1) -> Value)))
            packages ->Push(PeekToken(1) -> Value)
        }
        else{
            InvalidTokenError(PeekToken(1));
        }
        pointer++;
        pointer++;
        return;
    }
    if(CurrentToken() -> Value = "use"){
        if(string(PeekToken(1) -> Type) = string(TokenType -> Word)){
            containers ->Push(GenContainer("packageUse", GenContainer("Value", PeekToken(1) -> Value)))
            upackages ->Push(PeekToken(1) -> Value)
        }
        else{
            InvalidTokenError(PeekToken(1));
        }
        pointer++;
        pointer++;
        return;
    }
    InvalidTokenError(CurrentToken());
    pointer++;
}


function InvalidTokenError(token Token){
    ReportError("Unexpected tokentype: """ + string(token -> Type) + """ with Value: " + string(token -> Value), ErrorType->InvalidTokenError, token->Pos);
}

function CurrentToken() Token { return PeekToken(0); }   // Current token in code
function PeekToken(offset int) Token { if (EOFO(offset)) return make Token(TokenType -> Word, "Null", Position(null)); return tokens[pointer + offset] } // Peek into the future
function EOFT() bool { return pointer >= tokens ->GetLength(); }  // Is it EOF at current?
function EOFOT(offset int) bool { return pointer + offset >= tokens ->GetLength(); }   // Is it EOF in [offset] chars


class Container{
    set Ctype <- "Undefined";
    set any Value <- null;
}

function GenContainer(Ctype string, Value any) Container{
    var c <- make Container();
    c -> Ctype <- Ctype;
    c -> Value <- Value;
    return c;
}

function PrintContainer(container Container, indent string){
    if(container -> Ctype = "Value"){
        Print(indent + "\\" + container ->Ctype + ": " + string(container -> Value))
    }
    if(container -> Ctype = "Values"){
        var Values <- ContainerArr(container ->Value)
        for(var i <- 0; i < Values -> GetLength(); i++){
            PrintContainer(Values[i], indent + " ")
        }
    }   
    else if(string(container -> Value) = "Container"){
        Print(indent + "\\" + container ->Ctype)
        PrintContainer(Container(container -> Value), indent + " ")
    }
}
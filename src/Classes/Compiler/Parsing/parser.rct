set containers <- make Container array(0);
set packages <- make string array(0);
set upackages <- make string array(0);
function Parse(){
    pointer <- 0;
    while(!EOFT()){
        if(string(CurrentToken() -> tokenType) = string(TokenType -> Newline)){
            pointer++; continue;
        }
        if(string(CurrentToken() -> tokenType) = string(TokenType -> Keyword)){
            ParseKeyword(); continue;
        }
        if(string(CurrentToken() -> tokenType) = string(TokenType -> Word)){
            ParseWord(); continue;
        }

        InvalidTokenError(CurrentToken());
        pointer++;
    }
}

function ParseWord(){
    if(string(PeekToken(1) -> tokenType) = string(TokenType -> PackageAcs)){
        if(ContainsItem(packages, CurrentToken() ->value)){
            if(string(PeekToken(3) -> tokenType) = string(TokenType -> OpenParenthasis)){
                var params <- make Container array(0);
                params ->Push(GenContainer("funcName", GenContainer("value", PeekToken(2) -> value)));
                pointer <-+ 3;
                while(string(CurrentToken() -> tokenType) != string(TokenType -> CloseParenthasis)){
                    if(string(CurrentToken() -> tokenType) = string(TokenType -> String)){
                        params ->Push(GenContainer("string", GenContainer("value", CurrentToken() ->value)));
                    }
                    
                    pointer++;
                }
                containers ->Push(GenContainer("packageFetch", GenContainer("Call", GenContainer("values", params))));
                pointer <-+ 4;
                return;
            }
            else{
                containers ->Push(GenContainer("packageFetch", GenContainer("Var", GenContainer("value", PeekToken(2) -> value))))
                pointer <-+3;
                return;
            }
        }
    }

    InvalidTokenError(CurrentToken());
    pointer++;
}

function ParseKeyword(){
    if(CurrentToken() -> value = "package"){
        if(string(PeekToken(1) -> tokenType) = string(TokenType -> Word)){
            containers ->Push(GenContainer("packageInc", GenContainer("value", PeekToken(1) -> value)))
            packages ->Push(PeekToken(1) -> value)
        }
        else{
            InvalidTokenError(PeekToken(1));
        }
        pointer++;
        pointer++;
        return;
    }
    if(CurrentToken() -> value = "use"){
        if(string(PeekToken(1) -> tokenType) = string(TokenType -> Word)){
            containers ->Push(GenContainer("packageUse", GenContainer("value", PeekToken(1) -> value)))
            upackages ->Push(PeekToken(1) -> value)
        }
        else{
            InvalidTokenError(PeekToken(1));
        }
        pointer++;
        pointer++;
        return;
    }
    InvalidTokenError(CurrentToken());
    pointer++;
}


function InvalidTokenError(token Token){
        if(CurrentToken() -> value != ""){
            PrintError("Unexpected tokentype: " + Char(34) + string(token -> tokenType) + Char(34) + " with value: " + Char(34) + string(token -> value) + Char(34), ErrorType->InvalidTokenError);
        }
        else{
            PrintError("Unexpected tokentype: " + Char(34) + string(token -> tokenType) + Char(34), ErrorType->InvalidTokenError);
        }
}

function CurrentToken() Token { return PeekToken(0); }   // Current token in code
function PeekToken(offset int) Token { if (EOFO(offset)) return GenToken(TokenType -> Word, "Null"); return tokens[pointer + offset] } // Peek into the future
function EOFT() bool { return pointer >= tokens ->GetLength(); }  // Is it EOF at current?
function EOFOT(offset int) bool { return pointer + offset >= tokens ->GetLength(); }   // Is it EOF in [offset] chars


class Container{
    set Ctype <- "Undefined";
    set any value <- null;
}

function GenContainer(Ctype string, value any) Container{
    var c <- make Container();
    c -> Ctype <- Ctype;
    c -> value <- value;
    return c;
}

function PrintContainer(container Container, indent string){
    if(container -> Ctype = "value"){
        Print(indent + "\\" + container ->Ctype + ": " + string(container -> value))
    }
    if(container -> Ctype = "values"){
        var values <- ContainerArr(container ->value)
        for(var i <- 0; i < values -> GetLength(); i++){
            PrintContainer(values[i], indent + " ")
        }
    }   
    else if(string(container -> value) = "Container"){
        Print(indent + "\\" + container ->Ctype)
        PrintContainer(Container(container -> value), indent + " ")
    }
}